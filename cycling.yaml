############
## SPACES ##
############

- space: VirtualLab
  alignWithSegment:
    segment: Hips

############
# Bike metrics
############

# Bottom bracket
# midpoint of mean position of L_crank and mean position of R_crank
- parameter: Bottom_Bracket
  steps:
    - marker: L_crank => L_spindle
    - marker: R_crank => R_spindle
    - concatenate: [L_spindle, R_spindle]
      output: bracket
    - mean: bracket

# Saddle height
#   distance of Seat_Mid_Adj landmark to B_Bottom_Bracket_proj
#   Seat_Mid_Adj landmark is calcualted as B_seat_mid marker shifter vertically down by saddle marker radius
#   B_Bottom_Bracket_proj is calculated as projection of 
#     mean((TARGET::ORIGINAL::L_crank + TARGET::ORIGINAL::R_crank) / 2) 
#     to plane created by B_Down_Tube+B_SEAT_TUBE+B_STEM

# Seat Fore/Aft position
#   Vertical line from tip of saddle, to vertical line centered on bottom bracket. Neg = aft Pos = fore
#   Transform Seat_Front and Bottom_Bracket into the bike virtual lab to accommodate for bike direction

# Seat Angle
#   4 point angle between B_Seat_Back+B_Seat_Front+Bike Origin+Virtual Lab Y 

# Drop
#   Vertical difference between top of bars and top of saddle. Neg=bars lower Pos =bars higher
- parameter: Drop_mean
  steps:
    - marker: B_Handle_Bar.z => bars
    - marker: B_Seat_Mid.z = seat
    - subtract: [bars, seat]
      output: drop
    - mean: drop

# Reach (Saddle)
#   Reach is measured from saddle_front to handle_bar, direct connection (not measured horizontally)
#- parameter: Reach_mean
#  steps:
#    - marker: B_Seat_Front => seat
#    - marker: B_Handle_Bar = bars
#    - distance: [seat, bars]
#      output: reach
#    - mean: reach

# Stack
#   Head_Tube marker (projected on bike sagittal plane) to bottom bracket, vertical height difference
#     DERIVED::Bike_Geometry::B_Head_Tube_VirtLab::Z-DERIVED::Bike_Geometry::B_Bottom_Bracket_proj_VirtLab::Z

# Reach (Bottom)
#   Head_Tube marker (projected on sagittal plane) to bottom bracket, horizontal distance
#     DERIVED::Bike_Geometry::B_Head_Tube_VirtLab::Y-DERIVED::Bike_Geometry::B_Bottom_Bracket_proj_VirtLab::Y

############
# Crank Angle
############
# for now we allow to put crank marker only at opposite side of crank in respect to pedal (near axis)

# Left crank angle ###################

- event: L_TDC_Temp
  steps:
    - negate: Left_Crank_Vlab.z => crank_inv
    - peakFinder: crank_inv
      width: 10

- event: L_BDC_Temp
  steps:
    - peakFinder: Left_Crank_Vlab.z
      width: 10

- parameter: Left_Crank_Vlab
  steps:
    - marker: L_crank => crank
      space: VirtualLab
    - convert: crank
      from: mm
      to: m

- parameter: Left_Crank_Angle
  steps:
    # Calculate radius of the crank from mean vertical distance (Z) from BDC to TDC divided by 2
    - mean: Left_Crank_Vlab.z@L_TDC_Temp
      output: L_crank_Z_TDC
    - mean: Left_Crank_Vlab.x@L_TDC_Temp
      output: L_crank_VLY_TDC
    - mean: Left_Crank_Vlab.z@L_BDC_Temp
      output: L_crank_Z_BDC
    - mean: Left_Crank_Vlab.x@L_BDC_Temp
      output: L_crank_VLY_BDC

    - subtract: [L_crank_Z_BDC, L_crank_Z_TDC]
      output: sub
    - divide: [sub, 2]
      output: out
    - abs: out
      output: L_Crank_Radius

    # Adjust crank target marker to center of the crank (reference to Center of the crank) by subtracting mean y (forward) position at BDC using transformed crank
    - subtract: [Left_Crank_Vlab.x, L_crank_VLY_BDC]
      output: L_Pedal_Y

    # Adjust crank target marker to center of the crank (reference to Center of the crank) by subtracting mean Z (vertical) position at TDC and then subtracting the radius
    - subtract: [Left_Crank_Vlab.z, L_crank_Z_TDC]
      output: sub1
    - subtract: [sub1, L_Crank_Radius]
      output: L_Pedal_Z
      
    # Calculate crank angle in radians from ATAN2 using adjusted crank signals (Y and Z)
    - atan2: [L_Pedal_Y, L_Pedal_Z]
      output: rad
    - multiply: [rad, 57.2958] #to deg
      output: deg
    - add: [180, deg]

# Right crank angle ###################

- event: R_TDC_Temp
  steps:
    - negate: Right_Crank_Vlab.z => crank_inv
    - peakFinder: crank_inv
      width: 10

- event: R_BDC_Temp
  steps:
    - peakFinder: Right_Crank_Vlab.z
      width: 10

- parameter: Right_Crank_Vlab
  steps:
    - marker: R_crank => crank
      space: VirtualLab
    - convert: crank
      from: mm
      to: m

- parameter: Right_Crank_Angle
  steps:
    # Calculate radius of the crank from mean vertical distance (Z) from BDC to TDC divided by 2
    - mean: Right_Crank_Vlab.z@R_TDC_Temp
      output: R_crank_Z_TDC
    - mean: Right_Crank_Vlab.x@R_TDC_Temp
      output: R_crank_VLY_TDC
    - mean: Right_Crank_Vlab.z@R_BDC_Temp
      output: R_crank_Z_BDC
    - mean: Right_Crank_Vlab.x@R_BDC_Temp
      output: R_crank_VLY_BDC

    - subtract: [R_crank_Z_BDC, R_crank_Z_TDC]
      output: sub
    - divide: [sub, 2]
      output: out
    - abs: out
      output: R_Crank_Radius

    # Adjust crank target marker to center of the crank (reference to Center of the crank) by subtracting mean y (forward) position at BDC using transformed crank
    - subtract: [Right_Crank_Vlab.x, R_crank_VLY_BDC]
      output: R_Pedal_Y

    # Adjust crank target marker to center of the crank (reference to Center of the crank) by subtracting mean Z (vertical) position at TDC and then subtracting the radius
    - subtract: [Right_Crank_Vlab.z, R_crank_Z_TDC]
      output: sub1
    - subtract: [sub1, R_Crank_Radius]
      output: R_Pedal_Z
      
    # Calculate crank angle in radians from ATAN2 using adjusted crank signals (Y and Z)
    - atan2: [R_Pedal_Y, R_Pedal_Z]
      output: rad
    - multiply: [rad, 57.2958] #to deg
      output: deg
    - add: [180, deg]

############
## EVENTS ##
############

- event: L_TDC
  steps:
    - peakFinder: Left_Crank_Angle
      width: 10

#- event: L_TDC1
#  steps:
#    - subtract: [L_TDC, 1]

- event: L_BDC
  steps:
    - threshold: Left_Crank_Angle
      value: 180
      direction: up

- event: L_PP
  steps:
    - threshold: Left_Crank_Angle
      value: 90
      direction: up

- event: L_RP
  steps:
    - threshold: Left_Crank_Angle
      value: 270
      direction: up

- event: R_TDC
  steps:
    - peakFinder: Right_Crank_Angle
      width: 10

- event: R_BDC
  steps:
    - threshold: Right_Crank_Angle
      value: 180
      direction: up
    
- event: R_PP
  steps:
    - threshold: Right_Crank_Angle
      value: 90
      direction: up
    
- event: R_RP
  steps:
    - threshold: Right_Crank_Angle
      value: 270
      direction: up
    
# We do not have hip landmark, so we use origin of thigh segment
- event: LEFT_HIP_max
  steps:
    - segment: LeftUpLeg => Left_Thigh
      space: VirtualLab
      export: Left_Thigh
    - peakFinder: Left_Thigh.z
      width: 100

- event: LEFT_HIP_min
  steps:
    - negate: Left_Thigh => inv
    - peakFinder: [inv.z, LEFT_HIP_max, LEFT_HIP_max]
      width: 50

- event: RIGHT_HIP_max
  steps:
    - segment: RightUpLeg => Right_Thigh
      space: VirtualLab
      export: Right_Thigh
    - peakFinder: Right_Thigh.z
      width: 100

- event: RIGHT_HIP_min
  steps:
    - negate: Right_Thigh => inv
    - peakFinder: [inv.z, RIGHT_HIP_max, RIGHT_HIP_max]
      width: 50

############
## SERIES ##
############

#############
## METRICS ##
#############

# Cadence average [degs/s]
# (Cycle_count - 1) * 360 / (last L_TDC - first L_TDC)
- parameter: Cadence
  steps:
    - count: L_TDC
      output: Cycle_count
    - frameTime: L_TDC
      output: TDC_times
    - min: TDC_times
      output: first_TDC
    - max: TDC_times
      output: last_TDC
    - subtract: [Cycle_count, 1]
      output: cyc_count_cor
    - multiply: [cyc_count_cor, 360]
      output: cyc_count_cor_m
    - subtract: [last_TDC, first_TDC]
      output: time_first_to_last_TDC
    - divide: [cyc_count_cor_m, time_first_to_last_TDC]

# Hip vertical travel
- parameter: LEFT_HIP_range
  steps:
    - import: Left_Thigh@LEFT_HIP_min
      output: min
    - import: Left_Thigh@LEFT_HIP_max
      output: max
    - subtract: [max, min]
      output: sub
    - mean: sub
      export: LEFT_HIP_range_mean
    - stdDev: sub
      export: LEFT_HIP_range_sd

- parameter: RIGHT_HIP_range
  steps:
    - import: Right_Thigh@RIGHT_HIP_min
      output: min
    - import: Right_Thigh@RIGHT_HIP_max
      output: max
    - subtract: [max, min]
      output: sub
    - mean: sub
      export: RIGHT_HIP_range_mean
    - stdDev: sub
      export: RIGHT_HIP_range_sd

# Knee lateral travel