# A pipeline is written in YAML and instructs the Calqulus processing engine what to calculate.
# In order to process this pipeline, skeleton must be solved in QTM first.

# A pipeline consists of any number of base nodes defined on the root level. 

# Output nodes define an end result that is exported to the global scope and exported in the resulting JSON file.
# Output node can be 'event' or 'parameter'
# The main difference between the parameter and event is what type of data is stored. 
# A parameter node will store series and scalar data, whereas an event node will store event data.

# Space node defines custom coordinate systems. It is useful when orientation of subject changes
# with regards to the global coordinate system, e.g. walking through lab in both directions.

# Order of nodes is not important. They can be placed anywhere in YAML file.

############
## SPACES ##
############

# Create a space named VirtualLab, that is defined by the orientation of Hips (Pelvis) segment.
- space: VirtualLab
  alignWithSegment:
    segment: Hips

############
## EVENTS ##
############

# An event node defines steps used to calculate an event.
# An event is a label that describes one or more points in time.
# Events can be used in both event and parameter calculations, as well as for normalization by the reporting framework. 
# The resulting event is exported to the global scope and exported in the resulting JSON file.

# Create event at left knee maximum flexion
- event: BOF
  steps:
    - import: [0]
  
- event: EOF
  steps:
    - import: [$length]
  

- event: Left_knee_flex_max
  set: left # Used to specify which set the exported parameter will use. In most cases, this will be either left or right.
  steps:
    - max: Left Knee Angles.x
#    - peakFinder: Left Knee Angles.x # To do calculation on x component of the signal, select the component by adding '.x'
#    - eventMask: [$prev, BOF, EOF]


############
## SERIES ##
############

# Calculating joint angles

# --- Pelvis ---

- parameter: Pelvic Angles
  steps:
    - angle: Hips # angle is calculated relative to axes of global coordinate system, if only single input exists
      space: VirtualLab # calculate angle relative to virtual lab
    - multiply: [$prev, [-1, 1, 1]] # invert first component of output

# --- Hips ---

- parameter: Left Hip Angles
  set: left
  steps:
    - angle: [Hips, LeftUpLeg] # when two segments are specified, joint angle between the segments is calculated
    - multiply: [$prev, [1, -1, 1]]

- parameter: Right Hip Angles
  set: right
  steps:
    - angle: [Hips, RightUpLeg]

# --- Knee ---

- parameter: Left Knee Angles
  set: left
  steps:
    - angle: [LeftUpLeg, LeftLeg]
    - multiply: [$prev, [-1, -1, -1]]

- parameter: Right Knee Angles
  set: right
  steps:
    - angle: [RightUpLeg, RightLeg]
    - multiply: [$prev, [-1, 1, 1]]

# --- Ankle ---

- parameter: Left Ankle Angles
  set: left
  steps:
    - angle: [LeftLeg, LeftFoot]
    - multiply: [$prev, [1, -1, 1]]

- parameter: Right Ankle Angles
  set: right
  steps:
    - angle: [RightLeg, RightFoot]

# --- Thorax ---

- parameter: Thorax Angles
  steps:
    - angle: [Hips, Spine2]

# --- Shoulder ---

- parameter: Left Shoulder Angles
  set: left
  steps:
    - angle: [Spine2, LeftArm]
    - multiply: [$prev, [1, 1, -1]]

- parameter: Right Shoulder Angles
  set: right
  steps:
    - angle: [Spine2, RightArm]
    - multiply: [$prev, [1, -1, 1]]

# --- Elbow ---

- parameter: Left Elbow Angles
  set: left
  steps:
    - angle: [LeftArm, LeftForeArm]
    - multiply: [$prev, [1, 1, -1]]

- parameter: Right Elbow Angles
  set: right
  steps:
    - angle: [RightArm, RightForeArm]

# --- Wrist ---

- parameter: Left Wrist Angles
  set: left
  steps:
    - angle: [LeftForeArm, LeftHand]
    - multiply: [$prev, [1, 1, -1]]

- parameter: Right Wrist Angles
  set: right
  steps:
    - angle: [RightForeArm, RightHand]

# --- Head ---

- parameter: Head Angles
  steps:
    - angle: [Head, Spine2]


#############
## Metrics ##
#############
